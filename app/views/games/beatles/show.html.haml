= render PageComponent.new do |c|
  - c.heading(@game.game_type.name, :puzzle)

  - c.actions do
    - if policy(@game).admin?
      - unless @game.next_state.nil?
        .flex.flex-col.gap-y-1
          .flex.justify-end
            = button_to @game.decorate.display_button_text_to_move_to_next_state, progress_game_beatle_path(@game), method: :put, class: @game.decorate.class_name_for_button_to_move_to_next_state, form: { "data-turbo-confirm": "Are you sure? You cannot undo this." }
          .text-gray-500.text-xs
            = @game.decorate.display_state_info_for_admin

  - c.body do
    .flex.flex-col.gap-y-8.w-full
      / GENERAL
      .flex.flex-col.gap-y-4.w-full
        %h2.uppercase.cool-text-gradient General
        .grid.grid-cols-4.border.rounded-lg.px-4.py-6.bg-white
          .flex
            = render InfoFactComponent.new do |c|
              - c.term { "Admin" }
              - c.description { render Users::NameWithAvatarComponent.new(user: @game.user) }
          .flex
            = render InfoFactComponent.new do |c|
              - c.term { "State" }
              - c.with_description.with_content(@game.decorate.display_state)

          .flex
            = render InfoFactComponent.new do |c|
              - c.term { "Batch" }
              - c.with_description.with_content(@game.decorate.display_batch)

          .flex
            = render InfoFactComponent.new do |c|
              - c.term { "Players" }
              - c.with_description.with_content(@game.decorate.display_players_count)

      / GUESSES
      - if @game.started?
        .flex.flex-col.gap-y-4.w-full
          %h2.uppercase.cool-text-gradient Your Guesses
          .border.rounded-lg.px-4.py-6.bg-white
            = render Games::Beatles::GuessesComponent.new(game: @game, params:)

      - if @game.ended?
        .flex.flex-col.gap-y-4.w-full
          %h2.uppercase.cool-text-gradient Results
          .border.rounded-lg.px-4.py-6.bg-white
            .grid.grid-cols-1.gap-x-8.text-xl
              %table.w-full
                %thead
                  %tr
                    %th
                    %th.font-normal Rank
                    %th.font-normal Points
                    - @game.players.ordered.each do |player|
                      %th.font-normal= player.decorate.display_user_name

                %tbody
                  - @game.players.ordered.each do |guessing_player|
                    - player_guesses = Game::BeatlePlaylistGuess.where(guessing_player:).index_by(&:guessed_player)
                    %tr
                      %th.font-normal.text-left= guessing_player.decorate.display_user_name
                      %td.text-center= guessing_player.rank
                      %td.text-center= guessing_player.points
                      - @game.players.ordered.each do |guessed_player|
                        - points = player_guesses[guessed_player]&.points
                        %td.text-center.text-sm{ class: points.nil? ? "bg-gray-100 text-gray-100" : (points.zero? ? "bg-red-100 text-red-600" : "bg-green-500 text-white") }
                          = points
              .w-full.text-gray-400.text-sm.text-right
                (y = guessing player, x = guessed player)


      / MY PLAYLIST
      - if policy(@game).show_own_playlist?
        .flex.flex-col.gap-y-4.w-full
          %h2.uppercase.cool-text-gradient My playlist
          - playlist = @game.beatle_playlist_for_user(current_user)
          = turbo_frame_tag playlist do
            .bg-white.rounded-lg.border.flex.flex-col.divide-y.divide-gray-200.w-full
              .p-4
                .flex.items-center.gap-x-4.w-full
                  = link_to "Show my playlist", game_beatle_playlist_path(playlist.game, playlist), class: "green-button justify-center w-full"

                  - if policy(playlist).update?
                    = link_to "Edit my playlist", edit_game_beatle_playlist_path(playlist.game, playlist), class: "white-button justify-center w-full"

      / PLAYERS
      - unless @game.ended?
        .flex.flex-col.gap-y-4.w-full
          %h2.uppercase.cool-text-gradient Players
          .bg-white.rounded-lg.border.flex.flex-col.divide-y.divide-gray-200.w-full
            - @game.players.ordered.each do |player|
              .p-4.flex.justify-between.items-center
                .flex.items-center.gap-x-2
                  = render Users::NameWithAvatarComponent.new(user: player.user)
                .flex
                  = render Games::Beatles::PlayerProgressComponent.new(player:)

      - else
        .flex.flex-col.gap-y-4.w-full
          = turbo_frame_tag(:beatle_playlists, lazy: true, src: game_beatle_playlists_path(@game), class: "w-full")
