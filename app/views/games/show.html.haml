= render PageComponent.new do |c|
  - c.heading(@game.game_type.name, :puzzle)

  - c.body do
    .flex.flex-col.gap-y-8.w-full
      .grid.grid-cols-3.border.rounded-lg.px-4.py-6.bg-white
        .flex
          = render InfoFactComponent.new do |c|
            - c.term { "Admin" }
            - c.description { render Users::NameWithAvatarComponent.new(user: @game.user) }

        .flex
          = render InfoFactComponent.new do |c|
            - c.term { "Players" }
            - c.with_description.with_content(@game.decorate.display_players_count)

        .flex
          = render InfoFactComponent.new do |c|
            - c.term { "State" }
            - c.description do
              - if @game.initialized?
                .flex.flex-col.gap-y-2
                  .flex.items-center.gap-x-2
                    .flex
                      = @game.decorate.display_state

                    .flex
                      = form_with(model: @game) do |f|
                        = f.hidden_field :state, value: Game.states[:in_preparation]
                        = f.submit "Make public", class: "small-white-button"

                  .text-xs.text-gray-500
                    In this state only you can access the game. Make it public to to open it for the players.

              - if @game.in_preparation?
                .flex.flex-col.gap-y-2
                  .flex.items-center.gap-x-2
                    .flex
                      = @game.decorate.display_state

                    .flex
                      = form_with(model: @game) do |f|
                        = f.hidden_field :state, value: Game.states[:started]
                        = f.submit "Start game", class: "small-green-button", onclick: "confirm('Are you sure you want to start the game? This cannot be undone.')"

                  .text-xs.text-gray-500
                    In this state players can modify their tracks. Start the game to let players guess each others playlists. You can NOT return to this state again.

              - if @game.started?
                .flex.flex-col.gap-y-2
                  .flex.items-center.gap-x-2
                    .flex
                      = @game.decorate.display_state
                    .flex
                      = form_with(model: @game, html: { "data-turbo-confirm": "Are you sure you want to end the game? This cannot be undone." }) do |f|
                        = f.hidden_field :state, value: Game.states[:ended]
                        = f.submit "End game", class: "small-white-dangerous-button"

              - if @game.ended?
                .flex.flex-col.gap-y-2
                  .flex.items-center.gap-x-2
                    .flex
                      = @game.decorate.display_state

      - if policy(@game).admin?
        - if @game.in_preparation?
          = link_to "Start game", "#"

        - if @game.started?
          = link_to "End game", "#"

      .flex.flex-col.gap-y-4.w-full
        %h2.uppercase.cool-text-gradient Players
        .bg-white.rounded-lg.border.flex.flex-col.divide-y.divide-gray-200.w-full
          - @game.players.ordered.each do |player|
            .p-4.flex.justify-between.items-center
              .flex.items-center.gap-x-2
                = render Users::NameWithAvatarComponent.new(user: player.user)
              .flex
                = player.beatles_playlist.decorate.display_state

      .flex.flex-col.gap-y-4.w-full
        %h2.uppercase.cool-text-gradient My playlist
        = turbo_frame_tag @playlist do
          .bg-white.rounded-lg.border.flex.flex-col.divide-y.divide-gray-200.w-full
            .p-4
              .grid.items-center.gap-x-4.grid-cols
                - if @playlist.any_valid_links?
                  = link_to "Show my playlist", game_beatles_playlist_path(@playlist.game), class: "green-button justify-center"

                - if policy(@playlist).update?
                  = link_to "Edit my playlist", edit_game_beatles_playlist_path(@playlist.game), class: "white-button justify-center"
